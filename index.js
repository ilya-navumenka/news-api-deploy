(()=>{"use strict";var __webpack_modules__={993:()=>{eval("\n;// CONCATENATED MODULE: ./src/components/controller/loader.ts\nclass Loader {\r\n    constructor(baseLink, options) {\r\n        this.errorHandler = (res) => {\r\n            if (!res.ok) {\r\n                if (res.status === 401 || res.status === 404)\r\n                    console.log(`Sorry, but there is ${res.status} error: ${res.statusText}`);\r\n                throw Error(res.statusText);\r\n            }\r\n            return res;\r\n        };\r\n        this.baseLink = baseLink;\r\n        this.options = options;\r\n    }\r\n    getResp({ endpoint, options = {} }, callback) {\r\n        this.load('GET', endpoint, callback, options);\r\n    }\r\n    makeUrl(options, endpoint) {\r\n        const urlOptions = Object.assign(Object.assign({}, this.options), options);\r\n        let url = `${this.baseLink}${endpoint}?`;\r\n        Object.keys(urlOptions).forEach((key) => {\r\n            url += `${key}=${urlOptions[key]}&`;\r\n        });\r\n        return url.slice(0, -1);\r\n    }\r\n    load(method, endpoint, callback, options = {}) {\r\n        if (typeof callback === 'function') {\r\n            fetch(this.makeUrl(options, endpoint), { method })\r\n                .then(this.errorHandler)\r\n                .then((res) => res.json())\r\n                .then((data) => callback(data))\r\n                .catch((err) => console.error(err));\r\n        }\r\n        else {\r\n            throw Error('No callback for GET response');\r\n        }\r\n    }\r\n}\r\n/* harmony default export */ const loader = (Loader);\r\n\n;// CONCATENATED MODULE: ./src/components/controller/appLoader.ts\n\r\nclass AppLoader extends loader {\r\n    constructor() {\r\n        super('https://newsapi.org/v2/', {\r\n            apiKey: 'ed6a928fa6734563a1a2f0e1bb04960f',\r\n        });\r\n    }\r\n}\r\n/* harmony default export */ const appLoader = (AppLoader);\r\n\n;// CONCATENATED MODULE: ./src/components/controller/controller.ts\n\r\nclass AppController extends appLoader {\r\n    getSources(callback) {\r\n        super.getResp({\r\n            endpoint: 'sources',\r\n        }, callback);\r\n    }\r\n    getNews(e, callback) {\r\n        let target = e.target;\r\n        const newsContainer = e.currentTarget;\r\n        while (target !== newsContainer) {\r\n            if (target.classList.contains('source__item')) {\r\n                const sourceId = target.getAttribute('data-source-id');\r\n                if (newsContainer.getAttribute('data-source') !== sourceId) {\r\n                    newsContainer.setAttribute('data-source', sourceId);\r\n                    super.getResp({\r\n                        endpoint: 'everything',\r\n                        options: {\r\n                            sources: sourceId,\r\n                        },\r\n                    }, callback);\r\n                }\r\n                return;\r\n            }\r\n            target = target.parentNode;\r\n        }\r\n    }\r\n}\r\n/* harmony default export */ const controller = (AppController);\r\n\n;// CONCATENATED MODULE: ./src/components/view/news/news.ts\n\r\nclass News {\r\n    draw(data) {\r\n        const news = data.length >= 10 ? data.filter((_item, idx) => idx < 10) : data;\r\n        const fragment = document.createDocumentFragment();\r\n        const newsItemTemp = document.querySelector('#newsItemTemp');\r\n        news.forEach((item, idx) => {\r\n            const newsClone = newsItemTemp.content.cloneNode(true);\r\n            const newsCloneItem = newsClone.querySelector('.news__item');\r\n            if (idx % 2)\r\n                newsCloneItem.classList.add('alt');\r\n            const newsClonePhoto = newsClone.querySelector('.news__meta-photo');\r\n            newsClonePhoto.style.backgroundImage = `url(${item.urlToImage || 'img/news_placeholder.jpg'})`;\r\n            const newsCloneAuthor = newsClone.querySelector('.news__meta-author');\r\n            newsCloneAuthor.textContent = item.author || item.source.name;\r\n            const newsCloneDate = newsClone.querySelector('.news__meta-date');\r\n            newsCloneDate.textContent = item.publishedAt.slice(0, 10).split('-').reverse().join('-');\r\n            const newsCloneDescTittle = newsClone.querySelector('.news__description-title');\r\n            newsCloneDescTittle.textContent = item.title;\r\n            const newsCloneDescSource = newsClone.querySelector('.news__description-source');\r\n            newsCloneDescSource.textContent = item.source.name;\r\n            const newsCloneDescContent = newsClone.querySelector('.news__description-content');\r\n            newsCloneDescContent.textContent = item.description;\r\n            const newsCloneReadMoreRef = newsClone.querySelector('.news__read-more a');\r\n            newsCloneReadMoreRef.setAttribute('href', item.url);\r\n            fragment.append(newsClone);\r\n        });\r\n        const sectionMainNews = document.querySelector('.news');\r\n        sectionMainNews.innerHTML = '';\r\n        sectionMainNews.appendChild(fragment);\r\n    }\r\n}\r\n/* harmony default export */ const news = (News);\r\n\n;// CONCATENATED MODULE: ./src/components/interfaces/constants.ts\nconst mediaQueryLaptopMax = window.matchMedia('(max-width: 768px)');\r\nconst mediaQueryLaptopMin = window.matchMedia('(min-width: 420px)');\r\nconst mediaQueryPhoneMin = window.matchMedia('(max-width: 419px)');\r\nlet paginationStep = 5;\r\nif (mediaQueryLaptopMax.matches && mediaQueryLaptopMin.matches) {\r\n    paginationStep = 4;\r\n}\r\nelse if (mediaQueryPhoneMin.matches) {\r\n    paginationStep = 3;\r\n}\r\nvar Constants;\r\n(function (Constants) {\r\n    Constants[Constants[\"startPage\"] = 0] = \"startPage\";\r\n    Constants[Constants[\"step\"] = paginationStep] = \"step\";\r\n})(Constants || (Constants = {}));\r\n\n;// CONCATENATED MODULE: ./src/components/view/sources/sources.ts\n\r\nclass Sources {\r\n    draw(data) {\r\n        const fragment = document.createDocumentFragment();\r\n        const sourceItemTemp = document.querySelector('#sourceItemTemp');\r\n        data.forEach((item) => {\r\n            const sourceClone = sourceItemTemp.content.cloneNode(true);\r\n            const sourceCloneItemName = sourceClone.querySelector('.source__item-name');\r\n            sourceCloneItemName.textContent = item.name;\r\n            const sourceCloneItem = sourceClone.querySelector('.source__item');\r\n            sourceCloneItem.setAttribute('data-source-id', item.id);\r\n            fragment.append(sourceClone);\r\n        });\r\n        const sectionMainSources = document.querySelector('.sources');\r\n        sectionMainSources.append(fragment);\r\n    }\r\n}\r\n/* harmony default export */ const sources = (Sources);\r\n\n;// CONCATENATED MODULE: ./src/components/pagination/paginationSources.ts\n\r\n\r\n\r\nclass PaginationSources {\r\n    constructor(data) {\r\n        this.currentPage = Constants.startPage;\r\n        this.sources = new sources();\r\n        this.data = data;\r\n    }\r\n    init() {\r\n        // console.log(Constants.step);\r\n        const right = document.querySelector('.pagination__button_right');\r\n        right.addEventListener('click', () => {\r\n            if (this.currentPage === 0) {\r\n                const left = document.querySelector('.pagination__button_left');\r\n                left.classList.remove('pagination__button_disabled');\r\n                left.classList.add('hover');\r\n            }\r\n            if (this.currentPage === Math.floor(this.data.length / Constants.step) - 1) {\r\n                right.classList.add('pagination__button_disabled');\r\n                right.classList.remove('hover');\r\n            }\r\n            if (this.currentPage === Math.floor(this.data.length / Constants.step)) {\r\n                right.classList.add('pagination__button_disabled');\r\n                return;\r\n            }\r\n            this.currentPage++;\r\n            const sourceItems = document.querySelectorAll('.source__item');\r\n            sourceItems.forEach((item) => {\r\n                item.style.right = `calc(${100 * this.currentPage}% - 5px)`;\r\n            });\r\n        });\r\n        const left = document.querySelector('.pagination__button_left');\r\n        left.addEventListener('click', () => {\r\n            if (this.currentPage === Math.floor(this.data.length / Constants.step)) {\r\n                const right = document.querySelector('.pagination__button_right');\r\n                right.classList.remove('pagination__button_disabled');\r\n                right.classList.add('hover');\r\n            }\r\n            if (this.currentPage === 0) {\r\n                return;\r\n            }\r\n            if (this.currentPage === 1) {\r\n                left.classList.add('pagination__button_disabled');\r\n                left.classList.remove('hover');\r\n            }\r\n            this.currentPage--;\r\n            const sourceItems = document.querySelectorAll('.source__item');\r\n            sourceItems.forEach((item) => {\r\n                item.style.right = `calc(${100 * this.currentPage}% - 5px)`;\r\n            });\r\n        });\r\n        this.draw();\r\n    }\r\n    draw() {\r\n        this.sources.draw(this.data);\r\n    }\r\n}\r\n\n;// CONCATENATED MODULE: ./src/components/view/appView.ts\n\r\n\r\nclass AppView {\r\n    constructor() {\r\n        this.news = new news();\r\n    }\r\n    drawNews(data) {\r\n        const values = (data === null || data === void 0 ? void 0 : data.articles) ? data === null || data === void 0 ? void 0 : data.articles : [];\r\n        this.news.draw(values);\r\n    }\r\n    drawSources(data) {\r\n        const values = (data === null || data === void 0 ? void 0 : data.sources) ? data === null || data === void 0 ? void 0 : data.sources : [];\r\n        this.paginationSources = new PaginationSources(values);\r\n        this.paginationSources.init();\r\n    }\r\n}\r\n/* harmony default export */ const appView = ((/* unused pure expression or super */ null && (AppView)));\r\n\n;// CONCATENATED MODULE: ./src/components/app/app.ts\n\r\n\r\nclass App {\r\n    constructor() {\r\n        this.controller = new controller();\r\n        this.view = new AppView();\r\n    }\r\n    start() {\r\n        const sources = document.querySelector('.sources');\r\n        sources.addEventListener('click', (e) => this.controller.getNews(e, (data) => this.view.drawNews(data)));\r\n        this.controller.getSources((data) => this.view.drawSources(data));\r\n    }\r\n}\r\n/* harmony default export */ const app_app = (App);\r\n\n;// CONCATENATED MODULE: ./src/index.ts\n\r\n\r\nwindow.onload = () => {\r\n    const app = new app_app();\r\n    app.start();\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFJLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztJQUM5QixDQUFDO0lBRUQsS0FBSztRQUNGLE1BQU0sT0FBTyxHQUFtQixRQUFRLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ25FLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFhLEVBQVEsRUFBRSxDQUNyRCxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFlLEVBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQ2xGLENBQUM7UUFDRixJQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQWlCLEVBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDekYsQ0FBQztDQUNKO0FBRUQsOENBQWUsR0FBRyxFQUFDOzs7QUMzQm9CO0FBQ2pCO0FBRXRCLE1BQU0sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFO0lBQ2pCLE1BQU0sR0FBRyxHQUFRLElBQUksT0FBRyxFQUFFLENBQUM7SUFDM0IsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ2hCLENBQUMsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL05ld3NKUy8uL3NyYy9jb21wb25lbnRzL2NvbnRyb2xsZXIvbG9hZGVyLnRzPzBjY2YiLCJ3ZWJwYWNrOi8vTmV3c0pTLy4vc3JjL2NvbXBvbmVudHMvY29udHJvbGxlci9hcHBMb2FkZXIudHM/MDQ2NiIsIndlYnBhY2s6Ly9OZXdzSlMvLi9zcmMvY29tcG9uZW50cy9jb250cm9sbGVyL2NvbnRyb2xsZXIudHM/MWNlNCIsIndlYnBhY2s6Ly9OZXdzSlMvLi9zcmMvY29tcG9uZW50cy92aWV3L25ld3MvbmV3cy50cz8xNjhmIiwid2VicGFjazovL05ld3NKUy8uL3NyYy9jb21wb25lbnRzL2ludGVyZmFjZXMvY29uc3RhbnRzLnRzPzU0OTciLCJ3ZWJwYWNrOi8vTmV3c0pTLy4vc3JjL2NvbXBvbmVudHMvdmlldy9zb3VyY2VzL3NvdXJjZXMudHM/NmYwNCIsIndlYnBhY2s6Ly9OZXdzSlMvLi9zcmMvY29tcG9uZW50cy9wYWdpbmF0aW9uL3BhZ2luYXRpb25Tb3VyY2VzLnRzPzg1OTkiLCJ3ZWJwYWNrOi8vTmV3c0pTLy4vc3JjL2NvbXBvbmVudHMvdmlldy9hcHBWaWV3LnRzPzM0YzAiLCJ3ZWJwYWNrOi8vTmV3c0pTLy4vc3JjL2NvbXBvbmVudHMvYXBwL2FwcC50cz80ZDEyIiwid2VicGFjazovL05ld3NKUy8uL3NyYy9pbmRleC50cz9mZmI0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENhbGxiYWNrTmV3cywgQ2FsbGJhY2tTb3VyY2UgfSBmcm9tICcuLi9pbnRlcmZhY2VzL3R5cGVzJztcbmltcG9ydCB7IElEYXRhTmV3cywgSURhdGFTb3VyY2UgfSBmcm9tICcuLi9pbnRlcmZhY2VzL0lEYXRhJztcblxuaW50ZXJmYWNlIElMb2FkZXIge1xuICAgIGJhc2VMaW5rOiBzdHJpbmc7XG4gICAgb3B0aW9ucz86IHt9O1xufVxuXG5pbnRlcmZhY2UgSVVSTCB7XG4gICAgZW5kcG9pbnQ6IHN0cmluZztcbiAgICBvcHRpb25zPzogb2JqZWN0O1xufVxuXG5jbGFzcyBMb2FkZXIgaW1wbGVtZW50cyBJTG9hZGVyIHtcbiAgICBwdWJsaWMgYmFzZUxpbms6IHN0cmluZztcbiAgICBwdWJsaWMgb3B0aW9ucz86IHt9O1xuXG4gICAgY29uc3RydWN0b3IoYmFzZUxpbms6IHN0cmluZywgb3B0aW9ucz86IHt9KSB7XG4gICAgICAgIHRoaXMuYmFzZUxpbmsgPSBiYXNlTGluaztcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG5cbiAgICBnZXRSZXNwKHsgZW5kcG9pbnQsIG9wdGlvbnMgPSB7fSB9OiBJVVJMLCBjYWxsYmFjazogQ2FsbGJhY2tOZXdzIHwgQ2FsbGJhY2tTb3VyY2UpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5sb2FkKCdHRVQnLCBlbmRwb2ludCwgY2FsbGJhY2ssIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHB1YmxpYyBlcnJvckhhbmRsZXIgPSAocmVzOiBSZXNwb25zZSk6IFJlc3BvbnNlID0+IHtcbiAgICAgICAgaWYgKCFyZXMub2spIHtcbiAgICAgICAgICAgIGlmIChyZXMuc3RhdHVzID09PSA0MDEgfHwgcmVzLnN0YXR1cyA9PT0gNDA0KVxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBTb3JyeSwgYnV0IHRoZXJlIGlzICR7cmVzLnN0YXR1c30gZXJyb3I6ICR7cmVzLnN0YXR1c1RleHR9YCk7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcihyZXMuc3RhdHVzVGV4dCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH07XG5cbiAgICBtYWtlVXJsKG9wdGlvbnM6IHt9LCBlbmRwb2ludDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3QgdXJsT3B0aW9uczoge30gPSB7IC4uLnRoaXMub3B0aW9ucywgLi4ub3B0aW9ucyB9O1xuICAgICAgICBsZXQgdXJsOnN0cmluZyA9IGAke3RoaXMuYmFzZUxpbmt9JHtlbmRwb2ludH0/YDtcblxuICAgICAgICBPYmplY3Qua2V5cyh1cmxPcHRpb25zKS5mb3JFYWNoKChrZXk6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgdXJsICs9IGAke2tleX09JHs8c3RyaW5nPnVybE9wdGlvbnNba2V5XX0mYDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHVybC5zbGljZSgwLCAtMSk7XG4gICAgfVxuXG4gICAgbG9hZChtZXRob2Q6IHN0cmluZywgZW5kcG9pbnQ6IHN0cmluZywgY2FsbGJhY2s6IENhbGxiYWNrTmV3cyB8IENhbGxiYWNrU291cmNlLCBvcHRpb25zOiB7fSA9IHt9KTogdm9pZCB7XG4gICAgICAgIGlmICh0eXBlb2YgY2FsbGJhY2sgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGZldGNoKHRoaXMubWFrZVVybChvcHRpb25zLCBlbmRwb2ludCksIHsgbWV0aG9kIH0pXG4gICAgICAgICAgICAgICAgLnRoZW4odGhpcy5lcnJvckhhbmRsZXIpXG4gICAgICAgICAgICAgICAgLnRoZW4oKHJlczogUmVzcG9uc2UpID0+IHJlcy5qc29uKCkpXG4gICAgICAgICAgICAgICAgLnRoZW4oKGRhdGE6IElEYXRhTmV3cyB8IElEYXRhU291cmNlKSA9PiBjYWxsYmFjayhkYXRhKSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goKGVycikgPT4gY29uc29sZS5lcnJvcihlcnIpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdObyBjYWxsYmFjayBmb3IgR0VUIHJlc3BvbnNlJyk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IExvYWRlcjtcbiIsImltcG9ydCBMb2FkZXIgZnJvbSAnLi9sb2FkZXInO1xuXG5jbGFzcyBBcHBMb2FkZXIgZXh0ZW5kcyBMb2FkZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignaHR0cHM6Ly9uZXdzYXBpLm9yZy92Mi8nLCB7XG4gICAgICAgICAgICBhcGlLZXk6ICdlZDZhOTI4ZmE2NzM0NTYzYTFhMmYwZTFiYjA0OTYwZicsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQXBwTG9hZGVyO1xuIiwiaW1wb3J0IEFwcExvYWRlciBmcm9tICcuL2FwcExvYWRlcic7XG5pbXBvcnQgeyBDYWxsYmFja05ld3MsIENhbGxiYWNrU291cmNlIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy90eXBlcyc7XG5cbmNsYXNzIEFwcENvbnRyb2xsZXIgZXh0ZW5kcyBBcHBMb2FkZXIge1xuICAgIGdldFNvdXJjZXMoY2FsbGJhY2s6IENhbGxiYWNrU291cmNlKTogdm9pZCB7XG4gICAgICAgIHN1cGVyLmdldFJlc3AoXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZW5kcG9pbnQ6ICdzb3VyY2VzJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjYWxsYmFja1xuICAgICAgICApO1xuICAgIH1cblxuICAgIGdldE5ld3MoZTogTW91c2VFdmVudCwgY2FsbGJhY2s6IENhbGxiYWNrTmV3cyk6IHZvaWQge1xuICAgICAgICBsZXQgdGFyZ2V0ID0gPEhUTUxEaXZFbGVtZW50PmUudGFyZ2V0O1xuICAgICAgICBjb25zdCBuZXdzQ29udGFpbmVyID0gPEhUTUxEaXZFbGVtZW50PmUuY3VycmVudFRhcmdldDtcblxuICAgICAgICB3aGlsZSAodGFyZ2V0ICE9PSBuZXdzQ29udGFpbmVyKSB7XG4gICAgICAgICAgICBpZiAodGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnc291cmNlX19pdGVtJykpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzb3VyY2VJZCA9IDxzdHJpbmc+dGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1zb3VyY2UtaWQnKTtcbiAgICAgICAgICAgICAgICBpZiAobmV3c0NvbnRhaW5lci5nZXRBdHRyaWJ1dGUoJ2RhdGEtc291cmNlJykgIT09IHNvdXJjZUlkKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld3NDb250YWluZXIuc2V0QXR0cmlidXRlKCdkYXRhLXNvdXJjZScsIHNvdXJjZUlkKTtcbiAgICAgICAgICAgICAgICAgICAgc3VwZXIuZ2V0UmVzcChcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRwb2ludDogJ2V2ZXJ5dGhpbmcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlczogc291cmNlSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFja1xuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0YXJnZXQgPSA8SFRNTERpdkVsZW1lbnQ+dGFyZ2V0LnBhcmVudE5vZGU7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFwcENvbnRyb2xsZXI7XG4iLCJpbXBvcnQgJy4vbmV3cy5jc3MnO1xuaW1wb3J0IHsgSU5ld3MgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL0lEYXRhJztcblxuY2xhc3MgTmV3cyB7XG4gICAgZHJhdyhkYXRhOiBJTmV3c1tdKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IG5ld3MgPSBkYXRhLmxlbmd0aCA+PSAxMCA/IGRhdGEuZmlsdGVyKChfaXRlbSwgaWR4KSA9PiBpZHggPCAxMCkgOiBkYXRhO1xuXG4gICAgICAgIGNvbnN0IGZyYWdtZW50OiBEb2N1bWVudEZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgICAgICBjb25zdCBuZXdzSXRlbVRlbXAgPSA8SFRNTFRlbXBsYXRlRWxlbWVudD5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbmV3c0l0ZW1UZW1wJyk7XG5cbiAgICAgICAgbmV3cy5mb3JFYWNoKChpdGVtLCBpZHgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG5ld3NDbG9uZSA9IDxEb2N1bWVudEZyYWdtZW50Pm5ld3NJdGVtVGVtcC5jb250ZW50LmNsb25lTm9kZSh0cnVlKTtcblxuICAgICAgICAgICAgY29uc3QgbmV3c0Nsb25lSXRlbSA9IDxIVE1MRGl2RWxlbWVudD5uZXdzQ2xvbmUucXVlcnlTZWxlY3RvcignLm5ld3NfX2l0ZW0nKTtcbiAgICAgICAgICAgIGlmIChpZHggJSAyKSBuZXdzQ2xvbmVJdGVtLmNsYXNzTGlzdC5hZGQoJ2FsdCcpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBuZXdzQ2xvbmVQaG90byA9IDxIVE1MRGl2RWxlbWVudD5uZXdzQ2xvbmUucXVlcnlTZWxlY3RvcignLm5ld3NfX21ldGEtcGhvdG8nKTtcbiAgICAgICAgICAgIG5ld3NDbG9uZVBob3RvLnN0eWxlLmJhY2tncm91bmRJbWFnZSA9IGB1cmwoJHtpdGVtLnVybFRvSW1hZ2UgfHwgJ2ltZy9uZXdzX3BsYWNlaG9sZGVyLmpwZyd9KWA7XG4gICAgICAgIFxuICAgICAgICAgICAgY29uc3QgbmV3c0Nsb25lQXV0aG9yID0gPEhUTUxMSUVsZW1lbnQ+bmV3c0Nsb25lLnF1ZXJ5U2VsZWN0b3IoJy5uZXdzX19tZXRhLWF1dGhvcicpO1xuICAgICAgICAgICAgbmV3c0Nsb25lQXV0aG9yLnRleHRDb250ZW50ID0gaXRlbS5hdXRob3IgfHwgaXRlbS5zb3VyY2UubmFtZTtcblxuICAgICAgICAgICAgY29uc3QgbmV3c0Nsb25lRGF0ZSA9IDxIVE1MTElFbGVtZW50Pm5ld3NDbG9uZS5xdWVyeVNlbGVjdG9yKCcubmV3c19fbWV0YS1kYXRlJyk7XG4gICAgICAgICAgICBuZXdzQ2xvbmVEYXRlLnRleHRDb250ZW50ID0gaXRlbS5wdWJsaXNoZWRBdC5zbGljZSgwLCAxMCkuc3BsaXQoJy0nKS5yZXZlcnNlKCkuam9pbignLScpO1xuXG4gICAgICAgICAgICBjb25zdCBuZXdzQ2xvbmVEZXNjVGl0dGxlID0gPEhUTUxIZWFkaW5nRWxlbWVudD5uZXdzQ2xvbmUucXVlcnlTZWxlY3RvcignLm5ld3NfX2Rlc2NyaXB0aW9uLXRpdGxlJyk7XG4gICAgICAgICAgICBuZXdzQ2xvbmVEZXNjVGl0dGxlLnRleHRDb250ZW50ID0gaXRlbS50aXRsZTtcblxuICAgICAgICAgICAgY29uc3QgbmV3c0Nsb25lRGVzY1NvdXJjZSA9IDxIVE1MSGVhZGluZ0VsZW1lbnQ+bmV3c0Nsb25lLnF1ZXJ5U2VsZWN0b3IoJy5uZXdzX19kZXNjcmlwdGlvbi1zb3VyY2UnKTtcbiAgICAgICAgICAgIG5ld3NDbG9uZURlc2NTb3VyY2UudGV4dENvbnRlbnQgPSBpdGVtLnNvdXJjZS5uYW1lO1xuXG4gICAgICAgICAgICBjb25zdCBuZXdzQ2xvbmVEZXNjQ29udGVudCA9IDxIVE1MUGFyYWdyYXBoRWxlbWVudD5uZXdzQ2xvbmUucXVlcnlTZWxlY3RvcignLm5ld3NfX2Rlc2NyaXB0aW9uLWNvbnRlbnQnKTtcbiAgICAgICAgICAgIG5ld3NDbG9uZURlc2NDb250ZW50LnRleHRDb250ZW50ID0gaXRlbS5kZXNjcmlwdGlvbjtcblxuICAgICAgICAgICAgY29uc3QgbmV3c0Nsb25lUmVhZE1vcmVSZWYgPSA8SFRNTEFuY2hvckVsZW1lbnQ+bmV3c0Nsb25lLnF1ZXJ5U2VsZWN0b3IoJy5uZXdzX19yZWFkLW1vcmUgYScpO1xuICAgICAgICAgICAgbmV3c0Nsb25lUmVhZE1vcmVSZWYuc2V0QXR0cmlidXRlKCdocmVmJywgaXRlbS51cmwpO1xuXG4gICAgICAgICAgICBmcmFnbWVudC5hcHBlbmQobmV3c0Nsb25lKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3Qgc2VjdGlvbk1haW5OZXdzID0gPEhUTUxEaXZFbGVtZW50PmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5uZXdzJyk7XG4gICAgICAgIHNlY3Rpb25NYWluTmV3cy5pbm5lckhUTUwgPSAnJztcbiAgICAgICAgc2VjdGlvbk1haW5OZXdzLmFwcGVuZENoaWxkKGZyYWdtZW50KTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE5ld3M7XG4iLCJjb25zdCBtZWRpYVF1ZXJ5TGFwdG9wTWF4OiBNZWRpYVF1ZXJ5TGlzdCA9IHdpbmRvdy5tYXRjaE1lZGlhKCcobWF4LXdpZHRoOiA3NjhweCknKTtcclxuY29uc3QgbWVkaWFRdWVyeUxhcHRvcE1pbjogTWVkaWFRdWVyeUxpc3QgPSB3aW5kb3cubWF0Y2hNZWRpYSgnKG1pbi13aWR0aDogNDIwcHgpJyk7XHJcbmNvbnN0IG1lZGlhUXVlcnlQaG9uZU1pbjogTWVkaWFRdWVyeUxpc3QgPSB3aW5kb3cubWF0Y2hNZWRpYSgnKG1heC13aWR0aDogNDE5cHgpJyk7XHJcblxyXG5sZXQgcGFnaW5hdGlvblN0ZXAgPSA1O1xyXG5cclxuaWYgKG1lZGlhUXVlcnlMYXB0b3BNYXgubWF0Y2hlcyAmJiBtZWRpYVF1ZXJ5TGFwdG9wTWluLm1hdGNoZXMpIHtcclxuICAgIHBhZ2luYXRpb25TdGVwID0gNDtcclxufSBlbHNlIGlmIChtZWRpYVF1ZXJ5UGhvbmVNaW4ubWF0Y2hlcykge1xyXG4gICAgcGFnaW5hdGlvblN0ZXAgPSAzO1xyXG59XHJcblxyXG5leHBvcnQgZW51bSBDb25zdGFudHMge1xyXG4gICAgc3RhcnRQYWdlID0gMCxcclxuICAgIHN0ZXAgPSBwYWdpbmF0aW9uU3RlcCxcclxufSIsImltcG9ydCAnLi9zb3VyY2VzLmNzcyc7XG5pbXBvcnQgeyBJU291cmNlIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcy9JRGF0YSc7XG5cbmNsYXNzIFNvdXJjZXMge1xuICAgIGRyYXcoZGF0YTogSVNvdXJjZVtdKSB7XG4gICAgICAgIGNvbnN0IGZyYWdtZW50OiBEb2N1bWVudEZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgICAgICBjb25zdCBzb3VyY2VJdGVtVGVtcCA9IDxIVE1MVGVtcGxhdGVFbGVtZW50PmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzb3VyY2VJdGVtVGVtcCcpO1xuXG4gICAgICAgIGRhdGEuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc291cmNlQ2xvbmUgPSA8RG9jdW1lbnRGcmFnbWVudD5zb3VyY2VJdGVtVGVtcC5jb250ZW50LmNsb25lTm9kZSh0cnVlKTtcblxuICAgICAgICAgICAgY29uc3Qgc291cmNlQ2xvbmVJdGVtTmFtZSA9IDxIVE1MU3BhbkVsZW1lbnQ+c291cmNlQ2xvbmUucXVlcnlTZWxlY3RvcignLnNvdXJjZV9faXRlbS1uYW1lJyk7XG4gICAgICAgICAgICBzb3VyY2VDbG9uZUl0ZW1OYW1lLnRleHRDb250ZW50ID0gaXRlbS5uYW1lO1xuXG4gICAgICAgICAgICBjb25zdCBzb3VyY2VDbG9uZUl0ZW0gPSA8SFRNTERpdkVsZW1lbnQ+c291cmNlQ2xvbmUucXVlcnlTZWxlY3RvcignLnNvdXJjZV9faXRlbScpO1xuICAgICAgICAgICAgc291cmNlQ2xvbmVJdGVtLnNldEF0dHJpYnV0ZSgnZGF0YS1zb3VyY2UtaWQnLCBpdGVtLmlkKTtcblxuICAgICAgICAgICAgZnJhZ21lbnQuYXBwZW5kKHNvdXJjZUNsb25lKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3Qgc2VjdGlvbk1haW5Tb3VyY2VzID0gPEhUTUxEaXZFbGVtZW50PmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zb3VyY2VzJyk7XG4gICAgICAgIHNlY3Rpb25NYWluU291cmNlcy5hcHBlbmQoZnJhZ21lbnQpO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU291cmNlcztcbiIsImltcG9ydCB7IENvbnN0YW50cyB9IGZyb20gJy4uL2ludGVyZmFjZXMvY29uc3RhbnRzJztcclxuaW1wb3J0IHsgSVNvdXJjZSB9IGZyb20gJy4uL2ludGVyZmFjZXMvSURhdGEnO1xyXG5pbXBvcnQgU291cmNlcyBmcm9tICcuLi92aWV3L3NvdXJjZXMvc291cmNlcyc7XHJcbmltcG9ydCAnLi9wYWdpbmF0aW9uLmNzcyc7XHJcblxyXG5leHBvcnQgY2xhc3MgUGFnaW5hdGlvblNvdXJjZXMge1xyXG4gICAgcHVibGljIGN1cnJlbnRQYWdlOiBudW1iZXI7XHJcbiAgICBwdWJsaWMgc291cmNlczogU291cmNlcztcclxuICAgIHB1YmxpYyBkYXRhOiBJU291cmNlW107XHJcblxyXG4gICAgY29uc3RydWN0b3IoZGF0YTogSVNvdXJjZVtdKSB7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50UGFnZSA9IENvbnN0YW50cy5zdGFydFBhZ2U7XHJcbiAgICAgICAgdGhpcy5zb3VyY2VzID0gbmV3IFNvdXJjZXMoKTtcclxuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xyXG4gICAgfVxyXG5cclxuICAgIGluaXQoKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coQ29uc3RhbnRzLnN0ZXApO1xyXG4gICAgICAgIGNvbnN0IHJpZ2h0ID0gPEhUTUxEaXZFbGVtZW50PmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wYWdpbmF0aW9uX19idXR0b25fcmlnaHQnKTtcclxuICAgICAgICByaWdodC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudFBhZ2UgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGxlZnQgPSA8SFRNTERpdkVsZW1lbnQ+ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBhZ2luYXRpb25fX2J1dHRvbl9sZWZ0Jyk7XHJcbiAgICAgICAgICAgICAgICBsZWZ0LmNsYXNzTGlzdC5yZW1vdmUoJ3BhZ2luYXRpb25fX2J1dHRvbl9kaXNhYmxlZCcpO1xyXG4gICAgICAgICAgICAgICAgbGVmdC5jbGFzc0xpc3QuYWRkKCdob3ZlcicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRQYWdlID09PSBNYXRoLmZsb29yKHRoaXMuZGF0YS5sZW5ndGggLyBDb25zdGFudHMuc3RlcCkgLSAxKSB7XHJcbiAgICAgICAgICAgICAgICByaWdodC5jbGFzc0xpc3QuYWRkKCdwYWdpbmF0aW9uX19idXR0b25fZGlzYWJsZWQnKTtcclxuICAgICAgICAgICAgICAgIHJpZ2h0LmNsYXNzTGlzdC5yZW1vdmUoJ2hvdmVyJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudFBhZ2UgPT09IE1hdGguZmxvb3IodGhpcy5kYXRhLmxlbmd0aCAvIENvbnN0YW50cy5zdGVwKSkge1xyXG4gICAgICAgICAgICAgICAgcmlnaHQuY2xhc3NMaXN0LmFkZCgncGFnaW5hdGlvbl9fYnV0dG9uX2Rpc2FibGVkJyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50UGFnZSsrO1xyXG4gICAgICAgICAgICBjb25zdCBzb3VyY2VJdGVtczogTm9kZUxpc3RPZjxIVE1MRGl2RWxlbWVudD4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuc291cmNlX19pdGVtJyk7XHJcbiAgICAgICAgICAgIHNvdXJjZUl0ZW1zLmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgICAgICAgICAgIGl0ZW0uc3R5bGUucmlnaHQgPSBgY2FsYygkezEwMCAqIHRoaXMuY3VycmVudFBhZ2V9JSAtIDVweClgO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY29uc3QgbGVmdCA9IDxIVE1MRGl2RWxlbWVudD5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucGFnaW5hdGlvbl9fYnV0dG9uX2xlZnQnKTtcclxuICAgICAgICBsZWZ0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50UGFnZSA9PT0gTWF0aC5mbG9vcih0aGlzLmRhdGEubGVuZ3RoIC8gQ29uc3RhbnRzLnN0ZXApKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByaWdodCA9IDxIVE1MRGl2RWxlbWVudD5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucGFnaW5hdGlvbl9fYnV0dG9uX3JpZ2h0Jyk7XHJcbiAgICAgICAgICAgICAgICByaWdodC5jbGFzc0xpc3QucmVtb3ZlKCdwYWdpbmF0aW9uX19idXR0b25fZGlzYWJsZWQnKTtcclxuICAgICAgICAgICAgICAgIHJpZ2h0LmNsYXNzTGlzdC5hZGQoJ2hvdmVyJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudFBhZ2UgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50UGFnZSA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgbGVmdC5jbGFzc0xpc3QuYWRkKCdwYWdpbmF0aW9uX19idXR0b25fZGlzYWJsZWQnKTtcclxuICAgICAgICAgICAgICAgIGxlZnQuY2xhc3NMaXN0LnJlbW92ZSgnaG92ZXInKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRQYWdlLS07XHJcbiAgICAgICAgICAgIGNvbnN0IHNvdXJjZUl0ZW1zOiBOb2RlTGlzdE9mPEhUTUxEaXZFbGVtZW50PiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zb3VyY2VfX2l0ZW0nKTtcclxuICAgICAgICAgICAgc291cmNlSXRlbXMuZm9yRWFjaCgoaXRlbSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaXRlbS5zdHlsZS5yaWdodCA9IGBjYWxjKCR7MTAwICogdGhpcy5jdXJyZW50UGFnZX0lIC0gNXB4KWA7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLmRyYXcoKTtcclxuICAgIH1cclxuXHJcbiAgICBkcmF3KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuc291cmNlcy5kcmF3KHRoaXMuZGF0YSk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgTmV3cyBmcm9tICcuL25ld3MvbmV3cyc7XG5pbXBvcnQgU291cmNlcyBmcm9tICcuL3NvdXJjZXMvc291cmNlcyc7XG5pbXBvcnQgeyBJRGF0YU5ld3MsIElEYXRhU291cmNlLCBJTmV3cywgSVNvdXJjZSB9IGZyb20gJy4uL2ludGVyZmFjZXMvSURhdGEnO1xuaW1wb3J0IHsgUGFnaW5hdGlvblNvdXJjZXMgfSBmcm9tICcuLi9wYWdpbmF0aW9uL3BhZ2luYXRpb25Tb3VyY2VzJztcblxuaW50ZXJmYWNlIElBcHBWaWV3IHtcbiAgICBuZXdzOiBOZXdzO1xuICAgIHBhZ2luYXRpb25Tb3VyY2VzPzogUGFnaW5hdGlvblNvdXJjZXM7XG59XG5cbmV4cG9ydCBjbGFzcyBBcHBWaWV3IGltcGxlbWVudHMgSUFwcFZpZXcge1xuICAgIHB1YmxpYyBuZXdzOiBOZXdzO1xuICAgIHB1YmxpYyBwYWdpbmF0aW9uU291cmNlcz86IFBhZ2luYXRpb25Tb3VyY2VzO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMubmV3cyA9IG5ldyBOZXdzKCk7XG4gICAgfVxuXG4gICAgZHJhd05ld3MoZGF0YTogSURhdGFOZXdzKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHZhbHVlczogSU5ld3NbXSA9IGRhdGE/LmFydGljbGVzID8gZGF0YT8uYXJ0aWNsZXMgOiBbXTtcbiAgICAgICAgdGhpcy5uZXdzLmRyYXcodmFsdWVzKTtcbiAgICB9XG5cbiAgICBkcmF3U291cmNlcyhkYXRhOiBJRGF0YVNvdXJjZSk6IHZvaWQge1xuICAgICAgICBjb25zdCB2YWx1ZXM6IElTb3VyY2VbXSA9IGRhdGE/LnNvdXJjZXMgPyBkYXRhPy5zb3VyY2VzIDogW107XG4gICAgICAgIHRoaXMucGFnaW5hdGlvblNvdXJjZXMgPSBuZXcgUGFnaW5hdGlvblNvdXJjZXModmFsdWVzKTsgXG4gICAgICAgIHRoaXMucGFnaW5hdGlvblNvdXJjZXMuaW5pdCgpO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQXBwVmlldztcbiIsImltcG9ydCBBcHBDb250cm9sbGVyIGZyb20gJy4uL2NvbnRyb2xsZXIvY29udHJvbGxlcic7XG5pbXBvcnQgeyBBcHBWaWV3IH0gZnJvbSAnLi4vdmlldy9hcHBWaWV3JztcbmltcG9ydCB7IElEYXRhTmV3cywgSURhdGFTb3VyY2UgfSBmcm9tICcuLi9pbnRlcmZhY2VzL0lEYXRhJztcblxuaW50ZXJmYWNlIElBcHAge1xuICAgIGNvbnRyb2xsZXI6IEFwcENvbnRyb2xsZXI7XG4gICAgdmlldzogQXBwVmlldztcbn1cblxuY2xhc3MgQXBwIGltcGxlbWVudHMgSUFwcCB7XG4gICAgcHVibGljIGNvbnRyb2xsZXI6IEFwcENvbnRyb2xsZXI7XG4gICAgcHVibGljIHZpZXc6IEFwcFZpZXc7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5jb250cm9sbGVyID0gbmV3IEFwcENvbnRyb2xsZXIoKTtcbiAgICAgICAgdGhpcy52aWV3ID0gbmV3IEFwcFZpZXcoKTtcbiAgICB9XG5cbiAgICBzdGFydCgpOiB2b2lkIHtcbiAgICAgICBjb25zdCBzb3VyY2VzID0gPEhUTUxEaXZFbGVtZW50PmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zb3VyY2VzJyk7XG4gICAgICAgc291cmNlcy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlOiBNb3VzZUV2ZW50KTogdm9pZCA9PlxuICAgICAgICAgICAgdGhpcy5jb250cm9sbGVyLmdldE5ld3MoZSwgKGRhdGE6IElEYXRhTmV3cyk6IHZvaWQgPT4gdGhpcy52aWV3LmRyYXdOZXdzKGRhdGEpKVxuICAgICAgICApO1xuICAgICAgICB0aGlzLmNvbnRyb2xsZXIuZ2V0U291cmNlcygoZGF0YTogSURhdGFTb3VyY2UpOiB2b2lkID0+IHRoaXMudmlldy5kcmF3U291cmNlcyhkYXRhKSk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBBcHA7XG4iLCJpbXBvcnQgQXBwIGZyb20gJy4vY29tcG9uZW50cy9hcHAvYXBwJztcbmltcG9ydCAnLi9nbG9iYWwuY3NzJztcblxud2luZG93Lm9ubG9hZCA9ICgpID0+IHtcbiAgICBjb25zdCBhcHA6IEFwcCA9IG5ldyBBcHAoKTtcbiAgICBhcHAuc3RhcnQoKTtcbn07Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///993\n")}},__webpack_exports__={};__webpack_modules__[993]()})();